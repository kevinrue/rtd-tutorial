Using production pipelines
==========================

This page describes how to use a production pipelines to process data.

Production pipelines provide tried and tested bioinformatics workflows
that are ready to be used for processing data sets.
Using the example of `pipeline_rnaseq_hisat2 
<https://github.com/sims-lab/pipeline_rnaseq_hisat2>`_,
this guide demonstrates how to set up and use a production pipeline
for any suitable data set.

Getting started
---------------

Preparing your project on GitHub
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To start, `sign in to GitHub <https://github.com/login>`_
and navigate to the repository of the production pipeline, e.g.
`pipeline_rnaseq_hisat2 <https://github.com/sims-lab/pipeline_rnaseq_hisat2/>`_.
Click the green button :guilabel:`Use this template` to make a working copy
of the pipeline for your project:

* Leave the default "Owner", or change it to something better for a tutorial project.
* Introduce an appropriate "Repository name", for example ``pipeline_rnaseq_tutorial``.
* Feel free to choose whether to make your repository "Public" or "Private".

.. note::

   The template repository includes a GitHub Action workflow for continuous integration.
   That workflow is only relevant to testing the pipeline during development
   and maintenance. However, its execution counts towards your usage allowance for GitHub Action
   in private repositories.
   You will not need it for using the pipeline, and a section below
   demonstrates how to disable GitHub Action on your repository.

After that, click on the green :guilabel:`Create repository from template` button,
which will generate a new repository on your personal account
(or the one of your choosing).
This is the repository you will import on Read the Docs,
and it contains the following files and sub-directories:

``.github/workflows/build.yml``
  Sub-directory that contains instructions for GitHub Action workflows,
  you will leave it untouched.

``data/``
  Sub-directory where you will download the input FASTQ files for this guide.
  In your own projects, we recommend create symbolic links in this folder,
  while keeping your original data files outside of this repository
  (mostly to avoid accidentally committing those files to Git).

``envs/``
  Sub-directory that contains YAML files describing Conda environments
  for running or testing the pipeline, you will leave it untouched.
  You will only used those files as input to create the necessary
  Conda environment on the system where you will run the pipeline.

``etc/``
  Sub-directory that contains additional files needed specifically 
  for continuous integration, you will leave it untouched.

``README.md``
  Basic description of the repository.
  You will edit it as you see fit.

``config.yml``
  YAML file that is used to configure parameters of the pipeline.
  The file is included with example values.
  You will edit this file with values suited to your own situation,
  before running the pipeline.

``pipeline.py``
  Python script that describes the pipeline steps and overall workflow,
  you will leave it untouched.

.. figure:: /_static/images/guides/github-production.png
   :width: 80%
   :align: center
   :alt: Production pipeline on GitHub

   Production pipeline on GitHub

First steps
-----------

Checking the first build
~~~~~~~~~~~~~~~~~~~~~~~~

GitHub will automatically try to run the GitHub Action workflows
of your project right after you create it.
That workflow is designed for continuous integration during development,
testing that the pipeline works as expected on a set of test input files.
For the same reason, it is also a good positive control to verify that the pipeline
still works as expected (on those same test files) at the time when you made a copy of it.

To see the build logs, click on the orange circle icon next to
the commit ID on the project repository,
or alternatively navigate to the "Action" page,
then open the one on top (the most recent one).

If the build has not finished yet by the time you open it,
you will see a yellow indicator, meaning that it is still
in progress. However, even the logs of builds in progress
can be viewed as they are being produced.

.. figure:: /_static/images/guides/production-first-successful-build.png
   :width: 80%
   :align: center
   :alt: First successful build

   First successful build

When the build finishes, you will see a green indicator (red in case of failure),
the status of the build, the elapsed time, and download links to artifacts
that contain the output files generated by the pipeline.
If you now click on any of the build jobs, you will see the full logs
of commands run during the GitHub Action workflow, and their outputs.

.. figure:: /_static/images/guides/production-github-action-logs.png
   :width: 80%
   :align: center
   :alt: Logs of a GitHub Action workflow run.

   Logs of a GitHub Action workflow run

.. note::

   The logs of GitHub Action workflows are extremely valuable in the case of failure,
   for debugging and fixing the pipeline (or the GitHub Action workflow itself).
   Some of the steps in the workflow report information about the Conda installation,
   and the environment in which the workflow is executed.

   For production pipelines, if this first build reports a failure, we recommend opening
   an issue on the repository used as template (in this example, `pipeline_rnaseq_hisat2
   <https://github.com/sims-lab/pipeline_rnaseq_hisat2>`_),
   including a link to the build report of the GitHub Action workflow that failed.

Basic configuration changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can now proceed to make some basic configuration adjustments.
Navigate back to the project repository and click on the :guilabel:`Settings`
button, which will open the Settings page.

First of all, click on the :guilabel:`Actions` menu.

* Set "Action permissions" to ``Disable Actions``.
* Click the :guilabel:`Save` button.

.. note::

   In the next steps, you will edit the configuration of the pipeline to run
   on your own files. The modified configuration will cause the pipeline to
   fail on the test input files during the GitHub Action workflow; this is
   entirely expected as the GitHub Action worklow is only designed to validate
   the pipeline on the test input files.

Cloning the repository
~~~~~~~~~~~~~~~~~~~~~~

You are now ready to clone your copy of the repository on the computer where
you intend to run the pipeline.
For this, you will need `Git <https://git-scm.com/>`_
and the URL of your own copy of the repository:

.. prompt:: bash $

   git clone git@github.com:kevinrue/pipeline_rnaseq_tutorial.git
